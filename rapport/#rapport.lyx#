#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\begin_preamble
\usepackage{xcolor}

\definecolor{outerspace}{rgb}{0.25, 0.29, 0.3}
\definecolor{darkraspberry}{rgb}{0.53, 0.15, 0.34}
\end_preamble
\use_default_options true
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\listings_params "language=Pascal,bgcolor=black,style=fruity,fontsize={\small}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Arithmétique Multiprécision
\begin_inset Newline newline
\end_inset

Projet de MAO 
\end_layout

\begin_layout Author
Martin FLEURIAL, Célia ROCHE
\end_layout

\begin_layout Abstract
Dans ce rapport, nous
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{gobble}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Représentation des données en mémoire
\end_layout

\begin_layout Subsection*
Exercice 1
\end_layout

\begin_layout Standard
Soit 
\begin_inset Formula $m$
\end_inset

 un entier de 
\begin_inset Formula $n$
\end_inset

 chiffres en base 10.
 En stockant les chiffres de 
\begin_inset Formula $m$
\end_inset

 en base 
\begin_inset Formula $10$
\end_inset

 dans un tableau de byte, le nombre de bits utilisés est 
\begin_inset Formula $q=8n$
\end_inset

, car chaque 
\begin_inset Quotes eld
\end_inset

case
\begin_inset Quotes erd
\end_inset

 du tableau utilise 
\begin_inset Formula $8$
\end_inset

 bits.
 Calculons le nombre 
\begin_inset Formula $q'$
\end_inset

 de bits utilisés si nous pouvions stocker l'écriture binaire de 
\begin_inset Formula $m$
\end_inset

 dans la mémoire :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
m\text{ utilises }q'\text{ bits} & \Longleftrightarrow2^{q'-1}\leqslant m<2^{q'}\\
 & \Longleftrightarrow q'-1\leqslant\frac{\ln m}{\ln2}<q'\\
 & \Longleftrightarrow\frac{\ln m}{\ln2}<q'\leqslant\frac{\ln m}{\ln2}+1
\end{align*}

\end_inset

De plus 
\begin_inset Formula 
\begin{align*}
m\text{ a \ensuremath{n} chiffres en base 10} & \Longleftrightarrow10^{n-1}\leqslant m<10^{n}\\
 & \Longleftrightarrow(n-1)\frac{\ln10}{\ln2}\leqslant\frac{\ln m}{\ln2}<n\frac{\ln10}{\ln2}
\end{align*}

\end_inset

Donc
\begin_inset Formula 
\[
(n-1)\frac{\ln10}{\ln2}<q'<n\frac{\ln10}{\ln2}+1
\]

\end_inset

Posons 
\begin_inset Formula $e=\left|\frac{q'-q}{q}\right|$
\end_inset

 l'écart entre 
\begin_inset Formula $q$
\end_inset

 et 
\begin_inset Formula $q'$
\end_inset

.
 Alors 
\begin_inset Formula 
\begin{align*}
 & \left|1-\frac{n\frac{\ln10}{\ln2}-1}{8n}\right|<e<\left|1-\frac{(n-1)\frac{\ln10}{\ln2}}{8n}\right|\\
\Longleftrightarrow & \left|1-\frac{\ln10}{8\ln2}+\frac{1}{8n}\right|<e<\left|1-\frac{\ln10}{8\ln2}+\frac{\ln10}{8n\ln2}\right|
\end{align*}

\end_inset

Donc à la limite on a
\begin_inset Formula 
\[
e=1-\frac{\ln10}{8\ln2}\approx0.5848
\]

\end_inset

On voit alors que en stockant les chiffres de 
\begin_inset Formula $m$
\end_inset

 en base 
\begin_inset Formula $10$
\end_inset

 dans un tableau de byte, 
\begin_inset Formula $58\%$
\end_inset

 de la mémoire est utilisée inutilement par rapport à l'écriture binaire
 classique.
 
\end_layout

\begin_layout Subsection*
Exercice 2
\end_layout

\begin_layout Subsubsection*
Question 1
\end_layout

\begin_layout Standard
Procédons à la multiplication de 
\begin_inset Formula $325$
\end_inset

 par 
\begin_inset Formula $28$
\end_inset

 en base 
\begin_inset Formula $10$
\end_inset

 : supposons ces entiers écrits sous forme de 2 tableaux contenant respectivemen
t 3 et 2 chiffres, on a alors 
\begin_inset Formula 
\begin{align*}
325\times28 & =\left[5;2;3\right]\times\left[8;2\right]\\
\text{(1)} & =10^{0}\times8\times\left[5;2;3\right]+10^{1}\times2\times\left[5;2;3\right]\\
\text{(2)} & =\left[40;16;24\right]+\left[100;40;60\right]\\
\text{(3)} & =\left[0;0;6;2\right]+\left[0;0;5;6\right]\\
\text{(4)} & =\left[0;0;11;8\right]\\
\text{(5)} & =\left[0;0;1;9\right]\\
 & =9100
\end{align*}

\end_inset


\end_layout

\begin_layout Enumerate
On distribue 
\begin_inset Formula $28$
\end_inset

 dans 
\begin_inset Formula $325$
\end_inset

 en multipliant aussi par la puissance de 
\begin_inset Formula $10$
\end_inset

 associée.
\end_layout

\begin_layout Enumerate
On effectue les multiplications terme à terme
\end_layout

\begin_layout Enumerate
Dans chaque tableau, on procède de gauche à droite en ajoutant le quotient
 du nombre par 
\begin_inset Formula $10$
\end_inset

 à la case suivante (la retenue), et en remplaçant le nombre par le reste
 obtenu.
 Lorsqu'on atteint la dernière case, on en crée une nouvelle si besoin
\end_layout

\begin_layout Enumerate
On ajoute les tableaux terme à terme
\end_layout

\begin_layout Enumerate
On répète (3) sur le tableau obtenu
\end_layout

\begin_layout Subsubsection*
Question 2
\end_layout

\begin_layout Standard
On constate à l'étape (2) que les nombres contenus dans les cases des tableaux
 ne sont pas dans 
\begin_inset Formula $\left\{ 0;\dots;10-1\right\} .$
\end_inset

 Ce dépassement de plage est la raison pour laquelle on utilise la base
 
\begin_inset Formula $2^{32}$
\end_inset

 et pas 
\begin_inset Formula $2^{64}$
\end_inset

.
 En effet, si nous travaillions en base 
\begin_inset Formula $2^{64}$
\end_inset

, en cas de dépassement nous obtiendrions directement le reste (car la machine
 calcule dans 
\begin_inset Formula $\mathbb{Z}/2^{64}\mathbb{Z}$
\end_inset

) mais nous ne pourrions par obtenir la retenue, ce qui fausserait le calcul.
 En travaillant en base 
\begin_inset Formula $2^{32}$
\end_inset

 mais en stockant les entiers sur une plage de longueur 
\begin_inset Formula $2^{64}$
\end_inset

, nous pouvons obtenir la retenue et faire des calculs exacts.
\end_layout

\begin_layout Section
Normalisation et comparaison
\end_layout

\begin_layout Subsection*
Exercice 3
\end_layout

\begin_layout Subsubsection*
Question 1
\end_layout

\begin_layout Standard
Pour normaliser un int_array 
\begin_inset Formula $t$
\end_inset

, il suffit de retirer son dernier chiffre tant qu'il est égal à 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

procedure normalize (var t : int_array);
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

while (t <> nil) and (t[length (t) - 1] = 0) do
\end_layout

\begin_layout Plain Layout

	SetLength (t, length (t) - 1);
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Question 2
\end_layout

\begin_layout Standard
Il est nécessaire de passer 
\begin_inset Formula $t$
\end_inset

 en entrée/sortie à la fonction pour que la procédure ne duplique pas l'espace
 mémoire occupé par 
\begin_inset Formula $t$
\end_inset

.
 En effet, en passant un paramètre en entrée, le programme copie la mémoire
 occupée par 
\begin_inset Formula $t$
\end_inset

 à un autre endroit et fait les opérations sur cette mémoire ci.
 Cependant, ici nous manipulons des tableaux de tailles arbitraires, et
 donc qui occupent beaucoup d'espace mémoire.
 En passant 
\begin_inset Formula $t$
\end_inset

 en entrée/sortie, le programme procède à un passage par adresse (ou par
 référence) de 
\begin_inset Formula $t$
\end_inset

, c'est à dire qu'elle manipule un pointeur, ce qui est beaucoup moins coûteux
 que de dupliquer la mémoire.
\end_layout

\begin_layout Subsubsection*
Question 3
\end_layout

\begin_layout Standard
Pour comparer 2 int_array 
\begin_inset Formula $a$
\end_inset

 et 
\begin_inset Formula $b$
\end_inset

, on peut regarder plusieurs choses :
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $a$
\end_inset

 a moins de chiffre que 
\begin_inset Formula $b$
\end_inset

, alors on a 
\begin_inset Formula $a\leqslant b$
\end_inset

.
\end_layout

\begin_layout Enumerate
Sinon si 
\begin_inset Formula $a$
\end_inset

 a autant de chiffre que 
\begin_inset Formula $b$
\end_inset

, alors il faut trouver 2 chiffres différents en partant du chiffre de poid
 fort, et comparer ses 2 chiffres.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

function smaller (a, b: int_array) : Boolean;
\end_layout

\begin_layout Plain Layout

var i: LongWord;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

    normalize (a); normalize (b);
\end_layout

\begin_layout Plain Layout

    smaller := False;
\end_layout

\begin_layout Plain Layout

	if (length (a) < length (b)) then
\end_layout

\begin_layout Plain Layout

		smaller := True
\end_layout

\begin_layout Plain Layout

	else if (length (a) = length (b)) then
\end_layout

\begin_layout Plain Layout

	begin 		
\end_layout

\begin_layout Plain Layout

		i := length (a) - 1;
\end_layout

\begin_layout Plain Layout

		// On compare jusqu'à trouver
\end_layout

\begin_layout Plain Layout

		// des chiffres différents 
\end_layout

\begin_layout Plain Layout

		while (a[i]=b[i]) and (i>0) do
\end_layout

\begin_layout Plain Layout

			i := i - 1;
\end_layout

\begin_layout Plain Layout

		// On compare les chiffres
\end_layout

\begin_layout Plain Layout

		// différents et on conclut 
\end_layout

\begin_layout Plain Layout

		if (a[i]<=b[i]) then
\end_layout

\begin_layout Plain Layout

			smaller := True
\end_layout

\begin_layout Plain Layout

	end; 
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Quotient d’un int_array par un LongWord et conversion décimale
\end_layout

\begin_layout Subsection*
Exercice 4
\end_layout

\begin_layout Subsubsection*
Question 1
\end_layout

\begin_layout Standard
Montrons par récurrence la propriété 
\begin_inset Formula $P_{N}$
\end_inset

 suivante 
\begin_inset Formula 
\[
d\stackrel[n=0]{N}{\sum}q_{N-n}b^{n}+r_{N+1}=\stackrel[n=0]{N}{\sum}a_{N-n}b^{n}
\]

\end_inset

On sait que 
\begin_inset Formula 
\[
\begin{cases}
r_{0} & =0\\
r_{n}b+a_{n} & =dq_{n}+r_{n+1}\,(*)
\end{cases}
\]

\end_inset

Donc pour 
\begin_inset Formula $n=0$
\end_inset

 on a 
\begin_inset Formula $dq_{0}+r_{1}=a_{0}$
\end_inset

, donc 
\begin_inset Formula $P_{0}$
\end_inset

 est vraie.
 Supposons maintenant la propriété vraie jusqu'au rang 
\begin_inset Formula $N\geqslant0$
\end_inset

 et montrons la au rang 
\begin_inset Formula $N+1$
\end_inset

.
 On a 
\begin_inset Formula 
\begin{align*}
\stackrel[n=0]{N+1}{\sum}q_{N+1-n}b^{n} & =q_{N+1}b^{0}+\stackrel[n=1]{N+1}{\sum}q_{N+1-n}b^{n}\\
 & =q_{N+1}b^{0}+b\sum_{n=0}^{N}q_{N-n}b^{n}
\end{align*}

\end_inset

 Alors
\begin_inset Formula 
\begin{align*}
d\stackrel[n=0]{N+1}{\sum}q_{N+1-n}b^{n}+r_{N+2} & =dq_{N+1}b^{0}+db\stackrel[n=0]{N}{\sum}q_{N-n}b^{n}+r_{N+2}\\
\text{par }(*) & =r_{N+1}b+a_{N+1}+db\stackrel[n=0]{N}{\sum}q_{N-n}b^{n}\\
 & =b(d\stackrel[n=0]{N}{\sum}q_{N-n}b^{n}+r_{N+1})+a_{N+1}\\
\text{par hypothèse de récurrence} & =b\stackrel[n=0]{N}{\sum}a_{N-n}b^{n}+a_{N+1}\\
 & =\stackrel[n=0]{N}{\sum}a_{N-n}b^{n+1}+a_{N+1}\\
 & =\stackrel[k=1]{N+1}{\sum}a_{N+1-k}b^{k}+a_{N+1}b^{0}\\
 & =\stackrel[n=0]{N+1}{\sum}a_{N+1-n}b^{n}
\end{align*}

\end_inset

 Donc 
\begin_inset Formula $P_{N+1}$
\end_inset

 est vraie, donc la propriété est héréditaire.
 Alors, pour tout 
\begin_inset Formula $N\in\mathbb{N}$
\end_inset

 on a
\begin_inset Formula 
\[
d\stackrel[n=0]{N}{\sum}q_{N-n}b^{n}+r_{N+1}=\stackrel[n=0]{N}{\sum}a_{N-n}b^{n}
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Question 2
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,breaklines=true,tabsize=4"
inline false
status open

\begin_layout Plain Layout

procedure div_by_digit (a : int_array; d : LongWord; 
\end_layout

\begin_layout Plain Layout

						var q : int_array; var r : LongWord);
\end_layout

\begin_layout Plain Layout

var i, N : LongWord;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	normalize (a);
\end_layout

\begin_layout Plain Layout

	setLength (q, length (a));
\end_layout

\begin_layout Plain Layout

	r := 0;
\end_layout

\begin_layout Plain Layout

	N := length (a) - 1;
\end_layout

\begin_layout Plain Layout

	for i := N downto 0 do
\end_layout

\begin_layout Plain Layout

	begin
\end_layout

\begin_layout Plain Layout

		q[i] := (r * BASE + a[i]) div d;
\end_layout

\begin_layout Plain Layout

		r := (r * BASE + a[i]) mod d;
\end_layout

\begin_layout Plain Layout

	end;
\end_layout

\begin_layout Plain Layout

	normalize (q);
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Question 3
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

const digits = '0123456789';
\end_layout

\begin_layout Plain Layout

procedure write_int_array (a : int_array);
\end_layout

\begin_layout Plain Layout

var i, r : LongWord;
\end_layout

\begin_layout Plain Layout

	q : int_array;
\end_layout

\begin_layout Plain Layout

	entier_n : array of Char;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	normalize (a);
\end_layout

\begin_layout Plain Layout

	setLength (q, length (a));
\end_layout

\begin_layout Plain Layout

	setLength (entier_n, 1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	i := 0;
\end_layout

\begin_layout Plain Layout

	repeat
\end_layout

\begin_layout Plain Layout

		// Pour obtenir l'écriture en base 10 d'un int_array, il
\end_layout

\begin_layout Plain Layout

		// suffit de faire des divisions euclidiennes successive
\end_layout

\begin_layout Plain Layout

		// par 10.
 L'écriture en base 10 sera alors les
\end_layout

\begin_layout Plain Layout

		// restes obtenus.
\end_layout

\begin_layout Plain Layout

		div_by_digit (a, 10, q, r);
\end_layout

\begin_layout Plain Layout

		a := copy (q, 0, length (q));
\end_layout

\begin_layout Plain Layout

		entier_n[i] := digits[r + 1];
\end_layout

\begin_layout Plain Layout

		i := i+1;
\end_layout

\begin_layout Plain Layout

		setLength (entier_n, i+1);
\end_layout

\begin_layout Plain Layout

	until ((length (a) = 1) and (a[0] < 10));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// a[0] est la valeur du dernier reste.
\end_layout

\begin_layout Plain Layout

	entier_n[high (entier_n)] := digits[a[0] + 1];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for i := high (entier_n) downto 0 do
\end_layout

\begin_layout Plain Layout

		write (entier_n[i]);
\end_layout

\begin_layout Plain Layout

	writeln;
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Somme et différence de deux int_array
\end_layout

\begin_layout Subsection*
Exercice 5
\end_layout

\begin_layout Standard
Pour réaliser la somme de deux int_array, il faut réaliser l'addition avec
 retenue.
 C'est à dire additionner terme à terme (chiffre à chiffre) les int_array,
 et lorsque la somme est plus grande que la base (ici 
\begin_inset Formula $2^{32}$
\end_inset

), on ajoute la retenue au chiffre suivant.
 Par exemple:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
325+28 & =\left[5;2;3\right]+\left[8;2\right]\\
\text{(a)} & =\left[13;4;3\right]\\
\text{(b)} & =\left[3;5;3\right]
\end{align*}

\end_inset

On voit à l'étape (a) que la valeur de la retenue est le quotient de la
 division euclidienne de la somme par la base, et que on remplace la somme
 par le reste.
 On peut généraliser cela :
\end_layout

\begin_layout Standard
Soient 
\begin_inset Formula $m_{1}=\sum_{n=0}^{N_{1}}c_{n}b^{n}$
\end_inset

 et 
\begin_inset Formula $m_{2}=\sum_{n=0}^{N_{2}}c_{n}'b^{n}$
\end_inset

 avec 
\begin_inset Formula $m_{1}\geqslant m_{2}$
\end_inset

.
 Alors on pose 
\begin_inset Formula $N_{3}=\max(N_{1};N_{2})=N_{1}$
\end_inset

 et on définit 
\begin_inset Formula $\tilde{c}_{n}$
\end_inset

 ainsi :
\begin_inset Formula 
\[
\begin{cases}
c_{0}+c'_{0}=r_{0}b+\tilde{c}_{0} & \text{si }n=0\\
c_{n}+c'_{n}+r_{n-1}=r_{n}b+\tilde{c}_{n} & \text{si }1\leqslant n\leqslant N_{2}\\
c_{n}+r_{n-1}=r_{n}b+\tilde{c}_{n} & \text{si }N_{2}\leqslant n\leqslant N_{1}
\end{cases}
\]

\end_inset

 où les 
\begin_inset Formula $r_{n}\geqslant0$
\end_inset

 et 
\begin_inset Formula $\tilde{c}_{n}\in\{0,\dots,b-1$
\end_inset

}.
 Alors 
\begin_inset Formula $m_{1}+m_{2}=\sum_{n=0}^{N_{3}+1}\tilde{c}_{n}b^{n}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

procedure sum (a, b: int_array; var s: int_array);
\end_layout

\begin_layout Plain Layout

var i: LongWord;
\end_layout

\begin_layout Plain Layout

	somme: QWord;
\end_layout

\begin_layout Plain Layout

	retenue: LongWord;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	normalize (a); normalize (b);
\end_layout

\begin_layout Plain Layout

	if smaller (a, b) then
\end_layout

\begin_layout Plain Layout

		sum (b, a, s)
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

	begin
\end_layout

\begin_layout Plain Layout

		s := nil;
\end_layout

\begin_layout Plain Layout

		setLength (s, length (a) + 1);
\end_layout

\begin_layout Plain Layout

		retenue := 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		for i:=0 to high (s) do
\end_layout

\begin_layout Plain Layout

		begin
\end_layout

\begin_layout Plain Layout

			// On utilise un QWord dans 
\end_layout

\begin_layout Plain Layout

			// le cas où la somme est plus
\end_layout

\begin_layout Plain Layout

			// grande que la base pour 
\end_layout

\begin_layout Plain Layout

			// pouvoir calculer la retenue
\end_layout

\begin_layout Plain Layout

			if i <= high (b) then
\end_layout

\begin_layout Plain Layout

				somme := a[i] + retenue + b[i]
\end_layout

\begin_layout Plain Layout

			else 				
\end_layout

\begin_layout Plain Layout

				somme := a[i] + retenue;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			retenue := 0;
\end_layout

\begin_layout Plain Layout

			if somme >= BASE then
\end_layout

\begin_layout Plain Layout

 				retenue := somme div BASE;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			s[i] := somme mod BASE;
\end_layout

\begin_layout Plain Layout

		end;
\end_layout

\begin_layout Plain Layout

		normalize (s);
\end_layout

\begin_layout Plain Layout

	end;
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
De la même manière pour la différence, on peut généraliser l'algorithme
 .
 En reprenant les notations précédentes :
\begin_inset Formula 
\[
\begin{cases}
c_{0}-c'_{0}=r_{0}b+\tilde{c}_{0} & \text{si }n=0\\
c_{n}-c'_{n}+r_{n-1}=r_{n}b+\tilde{c}_{n} & \text{si }1\leqslant n\leqslant N_{2}\\
c_{n}+r_{n-1}=r_{n}b+\tilde{c}_{n} & \text{si }N_{2}\leqslant n\leqslant N_{1}
\end{cases}
\]

\end_inset

où les 
\begin_inset Formula $r_{n}\leqslant0$
\end_inset

 et 
\begin_inset Formula $\tilde{c}_{n}\in\{0,\dots,b-1\}$
\end_inset

 et alors 
\begin_inset Formula $m_{1}-m_{2}=\sum_{n=0}^{N_{3}}\tilde{c}_{n}b^{n}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

procedure diff (a, b: int_array; var s: int_array);
\end_layout

\begin_layout Plain Layout

var i: LongWord;
\end_layout

\begin_layout Plain Layout

	difference, retenue: Int64;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	normalize (a); normalize (b); 
\end_layout

\begin_layout Plain Layout

	s := nil;
\end_layout

\begin_layout Plain Layout

	setLength (s, length (a));
\end_layout

\begin_layout Plain Layout

	retenue := 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for i:=0 to High (s) do
\end_layout

\begin_layout Plain Layout

	begin
\end_layout

\begin_layout Plain Layout

		// On utilise un Int64 dans le cas
\end_layout

\begin_layout Plain Layout

		// où la différence est négative pour
\end_layout

\begin_layout Plain Layout

		// pouvoir calculer la retenue
\end_layout

\begin_layout Plain Layout

		if i <= high (b) then
\end_layout

\begin_layout Plain Layout

			difference := a[i] + retenue - b[i]
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

			difference := a[i] + retenue;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		retenue := 0;
\end_layout

\begin_layout Plain Layout

		// En Pascal, le reste peut être négatif.
\end_layout

\begin_layout Plain Layout

		// Si on ne veut pas qu'il le soit,
\end_layout

\begin_layout Plain Layout

		// il faut lui ajouter
\end_layout

\begin_layout Plain Layout

		// la base et retirer 1 au quotient.
\end_layout

\begin_layout Plain Layout

		if difference < 0 then
\end_layout

\begin_layout Plain Layout

 			retenue := (difference div BASE) - 1;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		s[i] := difference mod BASE;
\end_layout

\begin_layout Plain Layout

	end;
\end_layout

\begin_layout Plain Layout

	normalize (s);
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\end_inset


\end_layout

\begin_layout Section
Produit naïf de deux int_array
\end_layout

\begin_layout Subsection*
Exercice 6
\end_layout

\begin_layout Subsubsection*
Question 1
\end_layout

\begin_layout Standard
Soient 
\begin_inset Formula $x$
\end_inset

 et 
\begin_inset Formula $y$
\end_inset

 deux naturels.
 Soient 
\begin_inset Formula $\left(x_{k}\right)_{k=0..n}$
\end_inset

 et 
\begin_inset Formula $\left(y_{k'}\right)_{k'=0..m}$
\end_inset

 leurs chiffres en base 
\begin_inset Formula $b$
\end_inset

.
 On a alors
\begin_inset Formula 
\begin{align*}
x\times y & =\left(\sum_{k=0}^{n}x_{k}b^{k}\right)\left(\sum_{k'=0}^{m}y_{k'}b^{k'}\right)\\
 & =\sum_{k=0}^{n}x_{k}\left(\sum_{k'=0}^{m}y_{k'}b^{k'}\right)b^{k}\\
 & =\sum_{k=0}^{n}\sum_{k'=0}^{m}x_{k}y_{k'}b^{k+k'}
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
Question 2
\end_layout

\begin_layout Standard
Pour tout 
\begin_inset Formula $k,k'\in\{1,\dots,n\}\times\{1,\dots,m\}$
\end_inset

, on a 
\begin_inset Formula 
\[
x_{k}y_{k'}<2^{32}\times2^{32}=2^{64}
\]

\end_inset

Donc le produit 
\begin_inset Formula $x_{k}y_{k'}$
\end_inset

 est son propre représentant dans 
\begin_inset Formula $\mathbb{Z}/2^{64}\mathbb{Z}$
\end_inset

, donc le calcul est exact comme la machine sur laquelle va s'éxécuter le
 code est une machine 64 bits.
\end_layout

\begin_layout Subsubsection*
Question 3
\end_layout

\begin_layout Standard
Pour réaliser le produit de deux int_array, on applique l'algorithme décrit
 dans l'exercice 2, en utilisant la base 
\begin_inset Formula $2^{32}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

procedure prod (a, b : int_array; var p : int_array);
\end_layout

\begin_layout Plain Layout

var n, m: LongWord;
\end_layout

\begin_layout Plain Layout

	produit: QWord;
\end_layout

\begin_layout Plain Layout

	retenue, retenue_ld, bs_atteinte: LongWord;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	normalize (a); normalize (b);
\end_layout

\begin_layout Plain Layout

	p := nil;
\end_layout

\begin_layout Plain Layout

	setLength (p, length (a) + length (b) + 1);
\end_layout

\begin_layout Plain Layout

	retenue_ld := 0;
\end_layout

\begin_layout Plain Layout

	bs_atteinte := 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// La somme n+m n'est pas croissante
\end_layout

\begin_layout Plain Layout

	// dans la boucle ci-dessous, donc il
\end_layout

\begin_layout Plain Layout

	// faut conserver la retenue quand on retourne sur une
\end_layout

\begin_layout Plain Layout

	// valeur inférieure de n+m, et l'ajouter
\end_layout

\begin_layout Plain Layout

	// quand atteint n+m+1.
 De plus, quand on 
\end_layout

\begin_layout Plain Layout

	// atteint high (a) + high (b) il faut déplacer
\end_layout

\begin_layout Plain Layout

	// la retenue à high (a) + high(b) + 1
\end_layout

\begin_layout Plain Layout

	for n:=0 to high (a) do
\end_layout

\begin_layout Plain Layout

	begin
\end_layout

\begin_layout Plain Layout

		retenue := 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		for m:=0 to high (b) do
\end_layout

\begin_layout Plain Layout

		begin
\end_layout

\begin_layout Plain Layout

			produit := a[n]*b[m] + retenue;
\end_layout

\begin_layout Plain Layout

			if (n + m = bs_atteinte + 1) then
\end_layout

\begin_layout Plain Layout

				produit := produit + retenue_ld;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			retenue := produit div BASE;
\end_layout

\begin_layout Plain Layout

			p[n+m] := (p[n+m] + produit) mod BASE;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			if m = high (b) then
\end_layout

\begin_layout Plain Layout

			begin
\end_layout

\begin_layout Plain Layout

			    retenue_ld := retenue;
\end_layout

\begin_layout Plain Layout

				bs_atteinte := n + m;
\end_layout

\begin_layout Plain Layout

			end;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			if (n = high (a)) and (m = high (b)) then
\end_layout

\begin_layout Plain Layout

				p[n+m+1] := retenue;
\end_layout

\begin_layout Plain Layout

		end;
\end_layout

\begin_layout Plain Layout

	end;
\end_layout

\begin_layout Plain Layout

	normalize (p);
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Question 4
\end_layout

\begin_layout Standard
D'après le code ci-dessus, on voit que l'on fait une multiplication de longword
 par 
\end_layout

\begin_layout Section
Tests (et un peu d’arithmétique)
\end_layout

\begin_layout Subsection*
Exercice 7
\end_layout

\begin_layout Subsubsection*
Question 1
\end_layout

\begin_layout Standard
Soit un entier 
\begin_inset Formula $m$
\end_inset

 en base 
\begin_inset Formula $b=2^{32}$
\end_inset

, alors 
\begin_inset Formula $m$
\end_inset

 s'écrit : 
\begin_inset Formula $m=\stackrel[k=0]{r}{\sum}c_{k}b^{k}$
\end_inset

 avec 
\begin_inset Formula $c_{k}\in\{0;…;b-1\}$
\end_inset

 et 
\begin_inset Formula $c_{r}\neq0$
\end_inset

.
\begin_inset Newline newline
\end_inset

Dans 
\begin_inset Formula $ℤ/17ℤ$
\end_inset

, 
\begin_inset Formula $\overline{b}=\overline{2^{32}}=\overline{2}^{32}=\left(\left(\left(\underset{=\overline{16}=\overline{-1}}{\underbrace{\left(\overline{2}^{2}\right)^{2}}}\right)^{2}\right)^{2}\right)^{2}=\overline{1}$
\end_inset

.
\begin_inset Newline newline
\end_inset

Ainsi, dans 
\begin_inset Formula $ℤ/17ℤ$
\end_inset

, 
\begin_inset Formula 
\begin{align*}
\overline{m} & =\overline{\stackrel[k=0]{r}{\sum}c_{k}b^{k}}\\
 & =\stackrel[k=0]{r}{\sum}\overline{c_{k}b^{k}}\\
 & =\stackrel[k=0]{r}{\sum}\overline{c_{k}}\times\underset{=\overline{1}}{\underbrace{\overline{b^{k}}}}\\
 & =\overline{\stackrel[k=0]{r}{\sum}c_{k}}
\end{align*}

\end_inset

Donc un entier 
\begin_inset Formula $m$
\end_inset

 en base 
\begin_inset Formula $b=2^{32}$
\end_inset

 est divisible par 17 si, et seulement si, la somme de ses chiffres est
 divisible par 17.
\end_layout

\begin_layout Subsubsection*
Question 2
\end_layout

\begin_layout Standard
Par définition, on sait que 
\begin_inset Formula 
\[
51^{2020}=\prod_{i=1}^{2020}51=51\times\prod_{i=2}^{2020}51
\]

\end_inset

On en déduit donc l'algorithme suivant pour calculer 
\begin_inset Formula $51^{2020}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

var N1, N2:int_array;
\end_layout

\begin_layout Plain Layout

    i:LongWord;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	N1 := int_array.create (51);
\end_layout

\begin_layout Plain Layout

	N2 := int_array.create (51);
\end_layout

\begin_layout Plain Layout

	for i := 2 to 2020 do
\end_layout

\begin_layout Plain Layout

	    prod (N1, N2, N1);
\end_layout

\begin_layout Plain Layout

end.
\end_layout

\end_inset

Cet algorithme nous permet de calculer un chiffre de 
\begin_inset Formula $3450$
\end_inset

 chiffres.
\end_layout

\begin_layout Subsubsection*
Question 3
\end_layout

\begin_layout Standard
Un int_array est un tableau contenant l'écriture d'une nombre en base 
\begin_inset Formula $2^{32}$
\end_inset

, il faut donc sommer les éléments de ce tableau pour voir si un int_array
 est divisible par 
\begin_inset Formula $17$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Pascal,tabsize=4"
inline false
status open

\begin_layout Plain Layout

function estDivisiblePar17(a: int_array): Boolean;
\end_layout

\begin_layout Plain Layout

var i:LongWord;
\end_layout

\begin_layout Plain Layout

    somme:QWord;
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	somme := 0;
\end_layout

\begin_layout Plain Layout

	for i := 0 to high (a) do
\end_layout

\begin_layout Plain Layout

	    somme := somme + a[i];
\end_layout

\begin_layout Plain Layout

	estDivisiblePar17 := (somme mod 17) = 0;
\end_layout

\begin_layout Plain Layout

end; 
\end_layout

\end_inset


\end_layout

\end_body
\end_document
